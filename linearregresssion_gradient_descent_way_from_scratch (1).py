# -*- coding: utf-8 -*-
"""LinearRegresssion Gradient Descent Way From Scratch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qhWIgdq1_oYytC-g6PiHmu8iUNFisY41
"""

from sklearn.datasets import load_diabetes

import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

x,y=load_diabetes(return_X_y=True)

print(x.shape)

print(y.shape)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=12)

reg=LinearRegression()

reg.fit(x_train,y_train)

from sklearn.metrics import r2_score

reg.intercept_

reg.coef_

r2_score(y_test,reg.predict(x_test))

x.shape

class GDRegression:
  def __init__(self,epoch=3000,lr=0.5):
    self.coef=None
    self.intercept=None
    self.lr=lr
    self.epoch=epoch
  def fit(self,x,y):
    n=x.shape[0]
    self.intercept=0
    self.coef=np.ones(x.shape[1])  #(mX1) matrix
    #print(self.coef.shape)
    for i in range(self.epoch):
      y_pred=self.intercept+np.dot(x,self.coef)
      #update all the coefs and the intercept
      slope_intercept=-2*(np.mean(y-y_pred))
      self.intercept=self.intercept-self.lr*slope_intercept
      slope_coefs=-2*(np.dot(x.T,(y-y_pred)))/n
      self.coef=self.coef-self.lr*slope_coefs
  def predict(self,x):
    return self.intercept+np.dot(x,self.coef)

gdr=GDRegression()

gdr.fit(x_train,y_train)

gdr.intercept

gdr.coef

y_pred=gdr.predict(x_test)

y_pred

r2_score(y_test,y_pred)

#OLS method: 38% accuracy
#Gradient Descent method: 37.8% accuracy